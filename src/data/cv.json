{
  "personalInfo": {
    "name": "René Lázaro Collado Arteaga",
    "title": "Full Stack Developer",
    "email": "renearteaga261998@gmail.com",
    "location": "Habana, Cuba",
    "summary": "Desarrollador web especializado en el Backend con más de dos años de experiencia en el desarrollo de aplicaciones web y un fuerte interés en la arquitectura y el diseño de software. Capaz de trabajar en equipo o de manera independiente, con gran capacidad de análisis y resolución de problemas. Experiencia en el desarrollo de aplicaciones web usando Django Rest Framework, Flask y su unión con tecnologías frontend como Vue."
  },
  "contact": {
    "email": "renearteaga261998@gmail.com",
    "phone": "+5351251511",
    "linkedin": "https://www.linkedin.com/in/rene-lazaro-collado-arteaga/",
    "github": "https://github.com/critBus",
    "location": "Habana, Cuba"
  },
  "experience": [
    {
      "id": 4,
      "company": {
        "type": "company",
        "name": "Nitza",
        "logo": "logos/nitza.svg"
      },
      "position": "Full Stack",
      "startDate": "2024-09",
      "endDate": "2025-02",
      "description": [
        "He participado activamente en el desarrollo y mantenimiento de diversos proyectos web, tanto en el backend como en el frontend, demostrando mi capacidad para trabajar en entornos complejos y multidisciplinarios. En el desarrollo de APIs, he implementado endpoints con sus respectivas vistas en Vue.js, asegurando una integración fluida entre el frontend y el backend. Además, he integrado sistemas de pago y suscripciones utilizando Stripe, garantizando transacciones seguras y eficientes. He mejorado la documentación de APIs existentes utilizando la librería 'drf spectacular' y he desarrollado pruebas unitarias para garantizar la estabilidad y robustez del código. La seguridad ha sido una prioridad, implementando control de acceso basado en roles (RBAC) con Middleware y desarrollando aplicaciones para la gestión de usuarios y roles. También he integrado Celery para tareas asíncronas y he trabajado en proyectos construidos con Flask, ampliando mi experiencia en diferentes frameworks.",
        "En el proyecto PinkZebra, contribuí significativamente al mantenimiento y mejora del sitio web administrativo, una plataforma crucial para la gestión de datos y resultados de múltiples vendedores. Mi trabajo se centró en fortalecer la seguridad del sistema mediante la implementación de RBAC con Middleware, garantizando el acceso seguro a información sensible. Desarrollé la lógica para visualizar la jerarquía organizacional, permitiendo una comprensión clara de las relaciones entre los miembros de la empresa. Además, me encargué del mantenimiento y la optimización de diversas funcionalidades esenciales para el funcionamiento del sitio web. Documenté exhaustivamente cada paso del desarrollo utilizando Swagger, facilitando la colaboración y el mantenimiento a largo plazo. Implementé pruebas unitarias para asegurar la estabilidad y fiabilidad del código. Integré las vistas de cada funcionalidad con el frontend desarrollado en Vuetify, asegurando una experiencia de usuario coherente y fluida, y las conecté correctamente con el backend en Django Rest Framework. Destaco la implementación en Vue del árbol de jerarquía de la organización, que incluía paginación por niveles, optimización de llamadas al backend para minimizar la carga del árbol recursivo y la carga de nodos solo a petición del usuario. Este proyecto demostró mi capacidad para trabajar en un entorno complejo, abordando tanto el frontend como el backend, y aplicando mis habilidades en seguridad, optimización y documentación."
      ],
      "technologies": [
        "Django",
        "Django Rest Framework",
        "Flask",
        "SQLServer",
        "Vue",
        "Vuetify",
        "JavaScript",
        "HTML",
        "CSS",
        "Docker"
      ]
    },
    {
      "id": 3,
      "company": {
        "type": "company",
        "name": "WTS",
        "logo": "logos/wts_logo.svg"
      },
      "position": "Backend",
      "startDate": "2024-02",
      "endDate": "2024-08",
      "description": [
        "Desarrollé y desplegué el backend para 'LaLupa', una plataforma que conecta clientes con negocios locales a través de aplicaciones móviles. Implementé una API RESTful robusta utilizando Django Rest Framework, facilitando la gestión de usuarios y negocios. Diseñé e implementé un sistema de autenticación seguro mediante SMS y JWT Authentication, garantizando la seguridad y privacidad de los usuarios. Utilicé PostgreSQL como base de datos, optimizando el almacenamiento y la recuperación de datos. Documenté la API exhaustivamente con Swagger, facilitando la integración y el mantenimiento. Desarrollé pruebas unitarias para asegurar la estabilidad y fiabilidad del sistema. Mejoré la interfaz de administración con Jazzmin, optimizando la experiencia del usuario.",
        "Desarrollé 'Backup Manager', un sistema para almacenar y gestionar copias de seguridad de bases de datos y datos multimedia, utilizando Django REST Framework. Implementé un sistema de almacenamiento seguro para garantizar la integridad y disponibilidad de los datos. Utilicé autenticación JWT basada en el algoritmo RSA para proporcionar un acceso seguro y controlado a los recursos del sistema. Este proyecto se enfocó en la sincronización del estado de los datos para facilitar la recuperación eficiente de aplicaciones en situaciones de emergencia."
      ],
      "technologies": [
        "Django",
        "Django Rest Framework",
        "PostgreSQL"
      ]
    },
    {
      "id": 2,
      "company": {
        "type": "company",
        "name": "GODJANGO"
      },
      "position": "Backend",
      "startDate": "2023-12",
      "endDate": "2024-02",
      "description": [
        "Participé en las etapas iniciales del desarrollo de Resolviste, una plataforma intermediaria de remesas, contribuyendo en la creación de una API RESTful robusta con Django Rest Framework.",
        "Implementé la autenticación segura mediante JWT Authentication y planifiqué la integración de la plataforma de pago Stripe.",
        "Diseñé y optimicé la base de datos PostgreSQL para un manejo eficiente de la información.",
        "Documenté la API exhaustivamente utilizando Swagger, facilitando la integración y el mantenimiento.",
        "Desarrollé pruebas unitarias para garantizar la estabilidad y fiabilidad del sistema.",
        "Mejoré la interfaz de administración con la plantilla Jazzmin, optimizando la experiencia del usuario."
      ],
      "technologies": [
        "Django",
        "Django Rest Framework",
        "PostgreSQL"
      ]
    },
    {
      "id": 1,
      "company": {
        "type": "company",
        "name": "WTS",
        "logo": "logos/wts_logo.svg"
      },
      "position": "Backend",
      "startDate": "2023-02",
      "endDate": "2023-11",
      "description": [
        "Me encargue del desarrollo del backend de la aplicación Cvive, destinada a almacenar y gestionar arboles genealógicos",
        "Desarrollé y desplegué una API RESTful robusta utilizando Django, facilitando la gestión de relaciones familiares complejas a través de una estructura de grafo.",
        "Implementé un algoritmo de reconocimiento facial con TensorFlow, permitiendo la comparación de rostros entre familiares.",
        "Diseñé e integré dos bases de datos: Neo4j (grafo) y PostgreSQL (usuarios), optimizando el almacenamiento y la recuperación de datos.",
        "Implementé un sistema de autenticación seguro utilizando JSON Web Token.",
        "Desarrollé la lógica para la administración de cuestionarios de salud, proporcionando análisis de riesgo personalizados basados en datos genealógicos.",
        "Creé una interfaz de administración visual con Django para la gestión de cuestionarios de salud y preguntas frecuentes.",
        "Documenté la API con Swagger y aseguré la estabilidad del código mediante pruebas unitarias.",
        "Proporcioné soporte para la aplicación móvil frontend, gestionando preguntas y respuestas frecuentes organizadas por categorías."
      ],
      "technologies": [
        "Django",
        "Django Rest Framework",
        "PostgreSQL",
        "IA",
        "Deepface",
        "HTML",
        "CSS",
        "Neo4j"
      ]
    }
  ],
  "projects": {
    "Django": [
      {
        "id": 1,
        "name": "IAEstadosDeMaduracion",
        "position_occupied": "Full Stack",
        "client": {
          "type": "personal"
        },
        "description": [
          "IAEstadosDeMaduracion es una plataforma web completa en Django, diseñada para proporcionar una plataforma de entrenamiento de sistemas de visión por computadoras basados en redes convolucionales. Esta herramienta permite a los usuarios almacenar y gestionar datasets de imágenes de frutos, que posteriormente pueden ser utilizados para el entrenamiento de una red neuronal convolucional.",
          "La interfaz de esta plataforma web es muy cómoda y ofrece múltiples opciones de configuración para el entrenamiento de la red neuronal. Estas opciones permiten limitar el número máximo de épocas para el entrenamiento, almacenar solo el mejor modelo obtenido y detener el entrenamiento al alcanzar cierto límite de precisión. Durante el proceso de entrenamiento, IA Estados de Maduración proporciona gráficos que muestran la estadística del progreso, como la precisión y la pérdida.",
          "Al finalizar el entrenamiento, se muestra una matriz de confusión que presenta la precisión real del modelo neuronal resultante. Una vez que se han creado varios modelos neuronales para diferentes tipos de frutos, la plataforma permite a los usuarios clasificar automáticamente sus imágenes utilizando el modelo neuronal que mejor precisión haya alcanzado para su tipo de fruto. Esta herramienta es una excelente opción para evaluar la calidad de los sembrados de campos agrícolas, ya que no se requiere sacrificar una parte de la producción en el proceso. Es una herramienta útil para científicos, agricultores y cualquier persona interesada en clasificar imágenes de frutos según sus estados de madurez."
        ],
        "technologies": [
          "Django",
          "PostgreSQL",
          "IA",
          "TensorFlow",
          "Keras",
          "HTML",
          "CSS",
          "JavaScript",
          "Bootstrap"
        ],
        "links": [
          "https://github.com/critBus/IAEstadosDeMaduracion"
        ],
        "demo": []
      },
      {
        "id": 3,
        "name": "CinemaManagement",
        "position_occupied": "Full Stack",
        "client": {
          "type": "personal"
        },
        "description": [
          "CinemaManagement es un sitio web creado para la gestión de un negocio de contenido multimedia y la presentación de un catálogo web para publicitar dicho contenido. Esta herramienta proporciona al administrador la posibilidad de integrar los datos de las películas, series, animes, música y juegos que se tengan en el negocio.",
          "El sitio web cuenta con potentes buscadores que permiten encontrar fácilmente el contenido multimedia deseado, por ejemplo, mediante la búsqueda de películas por actores o viceversa. Además, el uso de Django como plataforma de desarrollo y Postgres como base de datos, proporciona un manejo de la información mucho más organizado y seguro.",
          "El sistema permite a los clientes explorar fácilmente el catálogo completo del negocio, ver las especificaciones de cada uno de los contenidos multimedia y revisar su disponibilidad. De esta manera, el sistema facilita la administración y venta de contenido multimedia, así como el proceso de selección y compra para los clientes.",
          "CinemaManagement es una herramienta útil para administradores y propietarios de negocios que desean mejorar la gestión y promoción de su contenido multimedia, al mismo tiempo que ofrecen a sus clientes una experiencia de navegación cómoda y fácil."
        ],
        "technologies": [
          "Django",
          "PostgreSQL",
          "HTML",
          "CSS",
          "JavaScript"
        ],
        "links": [
          "https://github.com/BigCatalyst/CinemaManagement"
        ],
        "demo": []
      },
      {
        "id": 4,
        "name": "MuseoJaruqueño",
        "position_occupied": "Full Stack",
        "client": {
          "type": "student"
        },
        "description": [
          "Se trata de un sitio web en el que colaboré en su creación, usando la tecnología Django. Este sitio está diseñado para administrar de manera efectiva la información del museo local y permitir que los trabajadores del centro actualicen y manejen información relevante sobre los diferentes artículos que se exhiben en la institución, incluyendo su descripción histórica, origen y ubicación.",
          "Los visitantes tienen acceso a una descripción detallada del museo y su historia, y pueden obtener información actualizada sobre las exposiciones y actividades que involucran a la institución. Mi contribución en la creación de este sitio web fue en el diseño y desarrollo del sistema, incluyendo la implementación de lógicas de negocios personalizadas y la creación de funciones para facilitar la administración de la información."
        ],
        "technologies": [
          "Django",
          "PostgreSQL",
          "HTML",
          "CSS",
          "JavaScript",
          "Bootstrap"
        ],
        "links": [
          "https://github.com/critBus/SitioMuseo"
        ],
        "demo": [
          {
            "type": "Web",
            "url": "https://sitiomuseo.onrender.com",
            "test": {
              "users_test": {
                "username": "admin",
                "password": "123"
              },
              "description": "Esta es una demo donde puede entrar para probar la app, esta desplegada en render de forma gratuita así que puede que tarde algo en desplegar por como funciona el servicio de render gratuito"
            }
          }
        ]
      },
      {
        "id": 5,
        "name": "Gestión Instituciones",
        "client": {
          "type": "student"
        },
        "position_occupied": "Full Stack",
        "description": [
          "Sitio web para la gestión de la información sobre las instituciones productivas y tecnologías existentes en el país. En el se permite a sus clientes la visualización de la ubicación geográfica de las instituciones, así como la obtención de los datos filtrados y organizados en formatos como PDF o EXEL.",
          "Para el desarrollo de este proyecto se utilizó Django. Para el frontend del cliente se utilizó bootstrap 5, con Leaflet y amCharts para mostrar la ubicación geográfica de las instituciones. Para el frontend de la administración se utilizó las herramientas que provee django. Para almacenar los datos se utilizó PostgreSQL."
        ],
        "technologies": [
          "Django",
          "PostgreSQL",
          "HTML",
          "CSS",
          "JavaScript",
          "Bootstrap"
        ],
        "links": [
          "https://github.com/critBus/GESTION_TECNOLOGICA"
        ],
        "demo": [
          {
            "type": "Web",
            "url": "https://gestion-tecnologica.onrender.com",
            "test": {
              "users_test": {
                "username": "admin",
                "password": "123"
              },
              "description": "Esta es una demo donde puede entrar para probar la app, esta desplegada en render de forma gratuita así que puede que tarde algo en desplegar por como funciona el servicio de render gratuito"
            }
          }
        ]
      },
      {
        "id": 6,
        "name": "Gestion De Nomina Salarial",
        "client": {
          "type": "student"
        },
        "position_occupied": "Full Stack",
        "description": [
          "Sitio web para la gestión y calculo del salario de los trabajadores de una institución cubana teniendo en cuenta las múltiples reglas a seguir para este proceso que dificultan su implementación. El sitio web gestionaba los datos a los trabajadores tales como la asistencia, las licencias de maternidad, certificados médicos , utilidades anuales y mensuales y con toda esta información ofrecía reportes que eran enviados al personal interesado.",
          "Para su implementación se utilizó Postgresql como base de datos, jazzmin como plantilla visual para mejorar la experiencia del usuario y reportbro para que los reportes tuvieran un formato en pdf personalizado según los requerimientos de la entidad"
        ],
        "technologies": [
          "Django",
          "PostgreSQL",
          "HTML",
          "CSS",
          "JavaScript",
          "Bootstrap"
        ],
        "links": [
          "https://github.com/critBus/Nomina"
        ],
        "demo": [
          {
            "type": "Web",
            "url": "https://nomina-n17d.onrender.com",
            "test": {
              "users_test": {
                "username": "admin",
                "password": "123"
              },
              "description": "Esta es una demo donde puede entrar para probar la app, esta desplegada en render de forma gratuita así que puede que tarde algo en desplegar por como funciona el servicio de render gratuito"
            }
          }
        ]
      },
      {
        "id": 15,
        "name": "Gestión Empresarial Municipal",
        "client": {
          "type": "student"
        },
        "position_occupied": "Full Stack",
        "description": [
          "En este proyecto se gestionan los datos de distintas entidades asociadas a una empresa general generando reportes pdf de cada uno de sus datos relevantes. ",
          "Este Proyecto fue desarrollado en django utilizando jazzmin, para embellecer la administración del sistema. Se utilizo reportbro para la generación de los pdf. Su base de datos fue desarrollada en postgresql."
        ],
        "technologies": [
          "Django",
          "PostgreSQL",
          "HTML",
          "CSS",
          "JavaScript",
          "Bootstrap"
        ],
        "links": [
          "https://github.com/critBus/grupo_empresarial_django"
        ],
        "demo": [
          {
            "type": "Web",
            "url": "https://grupo-empresarial-django.onrender.com",
            "test": {
              "users_test": {
                "username": "admin",
                "password": "123"
              },
              "description": "Esta es una demo donde puede entrar para probar la app, esta desplegada en render de forma gratuita así que puede que tarde algo en desplegar por como funciona el servicio de render gratuito"
            }
          }
        ]
      },
      {
        "id": 16,
        "name": "Inventario",
        "client": {
          "type": "student"
        },
        "position_occupied": "Full Stack",
        "description": [
          "Desarrollé un sistema integral de gestión de inventario utilizando Django como framework principal. El sistema permite la administración completa de productos, categorías, proveedores y movimientos de stock, con funcionalidades avanzadas de reportes y exportación de datos.",
          "Como aspectos Técnicos Destacables:",
          "Implementación de arquitectura modular con aplicaciones Django separadas",
          "Uso de variables de entorno para configuración segura",
          "Sistema de logging para seguimiento de operaciones",
          "Integración con servicios de correo electrónico",
          "Soporte para múltiples entornos (desarrollo/producción)"
        ],
        "technologies": [
          "Django",
          "PostgreSQL",
          "HTML",
          "CSS",
          "JavaScript",
          "Bootstrap"
        ],
        "links": [
          "https://github.com/critBus/Inventario"
        ],
        "demo": [
          {
            "type": "Web",
            "url": "https://inventario-fb51.onrender.com",
            "test": {
              "users_test": {
                "username": "admin",
                "password": "123"
              },
              "description": "Esta es una demo donde puede entrar para probar la app, esta desplegada en render de forma gratuita así que puede que tarde algo en desplegar por como funciona el servicio de render gratuito"
            }
          }
        ]
      },
      {
        "id": 17,
        "name": "Sistema de Administración para Fábrica de Ron",
        "client": {
          "type": "student"
        },
        "position_occupied": "Full Stack",
        "description": [
          "Desarrollé un sistema integral de administración para una fábrica de ron utilizando Django como framework principal. El sistema está diseñado para gestionar eficientemente todos los aspectos de la producción y distribución del ron.",
          "Funcionalidades Principales:",
          "Gestión completa del inventario de insumos y productos terminados",
          "Control de barriles de añejamiento con seguimiento de fechas y grados alcohólicos",
          "Administración de marcas y productos con sus especificaciones técnicas",
          "Sistema de clientes con clasificación por tipo (minorista, mayorista, distribuidor)",
          "Control de unidades de costo y precios",
          "Panel de administración personalizado para supervisión de operaciones"
        ],
        "technologies": [
          "Django",
          "PostgreSQL",
          "HTML",
          "CSS",
          "JavaScript",
          "Bootstrap"
        ],
        "links": [
          "https://github.com/critBus/AdminFabricaRon"
        ],
        "demo": [
          {
            "type": "Web",
            "url": "https://adminfabricaron.onrender.com",
            "test": {
              "users_test": {
                "username": "admin",
                "password": "123"
              },
              "description": "Esta es una demo donde puede entrar para probar la app, esta desplegada en render de forma gratuita así que puede que tarde algo en desplegar por como funciona el servicio de render gratuito"
            }
          }
        ]
      },
      {
        "id": 18,
        "name": "Sistema de Gestión de Laboratorio Químico para Central Termoeléctrica",
        "client": {
          "type": "student"
        },
        "position_occupied": "Full Stack",
        "description": [
          "Desarrollé y lideré un sistema integral de gestión para el laboratorio químico de una central termoeléctrica, utilizando Django como framework principal. El sistema permite el control y seguimiento de:",
          "Inventario de equipos de laboratorio y su estado",
          "Gestión de reactivos químicos y soluciones preparadas",
          "Control de ensayos de agua-vapor y combustibles",
          "Generación de informes técnicos",
          "Registro de trabajadores y sus actividades"
        ],
        "technologies": [
          "Django",
          "PostgreSQL",
          "HTML",
          "CSS",
          "JavaScript",
          "Bootstrap"
        ],
        "links": [
          "https://github.com/josecarlospr2002/tesis"
        ],
        "demo": [
          {
            "type": "Web",
            "url": "https://labterm.onrender.com",
            "test": {
              "users_test": {
                "username": "admin",
                "password": "123"
              },
              "description": "Esta es una demo donde puede entrar para probar la app, esta desplegada en render de forma gratuita así que puede que tarde algo en desplegar por como funciona el servicio de render gratuito"
            }
          }
        ]
      },
      {
        "id": 19,
        "name": "Sistema de Gestión de Biblioteca",
        "client": {
          "type": "student"
        },
        "position_occupied": "Full Stack",
        "description": [
          "Desarrollé y lideré la implementación de un sistema integral de gestión bibliotecaria utilizando Django como framework principal. El sistema incluye las siguientes funcionalidades:",
          "Gestión completa de usuarios con diferentes niveles de acceso (administradores, bibliotecarios y usuarios)",
          "Catálogo digital de libros con búsqueda avanzada y filtros",
          "Sistema de préstamos con control de fechas y renovaciones",
          "Gestión de multas y sanciones",
          "Generación de reportes personalizados",
          "Panel de administración personalizado con Django Jazzmin",
          "Importación/exportación de datos en múltiples formatos"
        ],
        "technologies": [
          "Django",
          "PostgreSQL",
          "HTML",
          "CSS",
          "JavaScript",
          "Bootstrap"
        ],
        "links": [
          "https://github.com/critBus/Biblioteca"
        ],
        "demo": [
          {
            "type": "Web",
            "url": "https://biblioteca-on76.onrender.com",
            "test": {
              "users_test": {
                "username": "admin",
                "password": "123"
              },
              "description": "Esta es una demo donde puede entrar para probar la app, esta desplegada en render de forma gratuita así que puede que tarde algo en desplegar por como funciona el servicio de render gratuito"
            }
          }
        ]
      }
    ],
    "Django Rest Framework": [
      {
        "id": 7,
        "name": "CVive",
        "position_occupied": "Backend",
        "client": {
          "type": "company",
          "name": "WTS",
          "logo": "logos/wts_logo.svg"
        },
        "description": [
          "CVive es un proyecto que se dedica a centralizar la información sobre el parentesco de una persona, permitiendo búsquedas avanzadas y análisis de datos mediante IA sobre relaciones sanguíneas de forma similar a un árbol genealógico, pero implementado con una estructura de grafo en el ámbito de la programación.",
          "Como desarrollador en este proyecto, me encargué del desarrollo del backend y del despliegue en un servidor Ubuntu de un servicio en línea que se presenta como una API REST. Utilicé el framework Django para implementar este servicio, con el objetivo de gestionar las relaciones familiares de los usuarios. Además puse en funcionamiento utilizando el framework TensorFlow el algoritmo de reconocimiento facial para la comparación de rostros entre los parientes del usuario.",
          "Para llevar a cabo este objetivo, utilicé dos base de datos Neo4j, basada en grafos y escrita en Java, así como una base de datos PostgreSQL para gestionar las cuentas de los usuarios. Además, implementé la autenticación utilizando JSON Web Token.",
          "Este servicio también incluye la administración de cuestionarios sobre el estado de salud, que permiten a los usuarios conocer su riesgo de padecer determinadas enfermedades. Los resultados se obtienen en función de las respuestas seleccionadas por el usuario y teniendo en cuenta la información del árbol genealógico almacenado en la base de datos.",
          "Adicionalmente, la API ofrece la posibilidad de administrar preguntas y respuestas frecuentes, organizadas por categorías, para brindar soporte al frontend implementado, en este caso una aplicación móvil.",
          "En la implementación de CVive utilicé las funcionalidades proporcionadas por Django para desarrollar una interfaz de administración visual destinada a los administradores del sistema. Esta interfaz permite gestionar la sección de cuestionarios de salud y preguntas y respuestas frecuentes para los usuarios finales.",
          "Se documento el proyecto por medio de swagger y se garantizó su estabilidad con la utilización de pruebas unitarias"
        ],
        "technologies": [
          "Django",
          "Django Rest Framework",
          "PostgreSQL",
          "IA",
          "Deepface",
          "Neo4j"
        ],
        "links": [],
        "demo": []
      },
      {
        "id": 8,
        "name": "LaLupa",
        "position_occupied": "Backend",
        "client": {
          "type": "company",
          "name": "WTS",
          "logo": "logos/wts_logo.svg"
        },
        "description": [
          "Me encargue del desarrollo y despliegue del backend del proyecto Lupa, el cual consta de dos aplicaciones móviles que ofrecen a los clientes un lugar donde encontrar negocios relacionados con sus intereses, y a los emprendedores una plataforma para gestionar y publicar sus negocios.",
          "Implemente un sistema de autenticación por sms para inscribir un usuario nuevo y para solicitar la recuperación de la contraseña.",
          "Para llevar a cabo esta tarea, he utilizado Django Rest Framework para implementar la API, PostgreSQL y JWT Authentication.",
          "Se documentó el proyecto por medio de swagger, se garantizó su estabilidad con la utilización de pruebas unitarias, para la administración se utilizó jazzmin."
        ],
        "technologies": [
          "Django",
          "Django Rest Framework",
          "PostgreSQL",
          "HTML",
          "CSS",
          "JavaScript"
        ],
        "links": [],
        "demo": [
          {
            "type": "Web",
            "url": "https://lalupapp.com/"
          },
          {
            "type": "Google Play Store",
            "url": "https://play.google.com/store/apps/details?id=com.wts.lalupa.admin&hl=es"
          },
          {
            "type": "Google Play Store",
            "url": "https://play.google.com/store/apps/details?id=com.wts.lalupa.client.v3&hl=es"
          }
        ]
      },
      {
        "id": 9,
        "name": "CRIMAT",
        "position_occupied": "Full Stack",
        "client": {
          "type": "company",
          "name": "WTS",
          "logo": "logos/wts_logo.svg"
        },
        "description": [
          "Participe en el mantenimiento y reparación del sitio web CRIMAT que ofrecía un sistema para la gestión de un proveedor de productos de belleza, orientada a la venta de productos exclusivos a pequeños negocios independientes. Este sitio enviaba de forma automática avisos a sus clientes por medio de correos de las nuevas ofertas. Además servía de API para una aplicación de celular que también ofrecía estos servicios.",
          "Para su implementación se utilizó Postgresql como base de datos, se adaptó una plantilla basada en bootstrap para el visual del cliente y jazzmin para la administración de los desarrolladores, se utilizó Stripe como pasarela de pago, la api se creó mediante django rest framework y se documentó por medio de swagger. Para mantener la estabilidad fueron aplicadas múltiples pruebas unitarias. Se utilizó JWT Authentication para la seguridad de la api."
        ],
        "technologies": [
          "Django",
          "Django Rest Framework",
          "PostgreSQL",
          "HTML",
          "CSS",
          "JavaScript",
          "Bootstrap"
        ],
        "links": [],
        "demo": []
      },
      {
        "id": 10,
        "name": "Backup Manager",
        "position_occupied": "Backend",
        "client": {
          "type": "company",
          "name": "WTS",
          "logo": "logos/wts_logo.svg"
        },
        "description": [
          "Desarrollé el proyecto Backup Manager utilizando Django REST Framework, diseñado para almacenar y gestionar datos de copias de seguridad de bases de datos y conjuntos de datos multimedia. Este sistema sincroniza el estado de los datos para garantizar la recuperación eficiente de aplicaciones suscritas en situaciones de emergencia.",
          "Almacenamiento Seguro: Implementé un sistema robusto para el almacenamiento y gestión de copias de seguridad, asegurando la integridad y disponibilidad de los datos.",
          "Autenticación Segura: Utilicé autenticación JWT basada en el algoritmo RSA, proporcionando un acceso seguro y controlado a los recursos del sistema."
        ],
        "technologies": [
          "Django",
          "Django Rest Framework",
          "PostgreSQL"
        ],
        "links": [],
        "demo": []
      },
      {
        "id": 11,
        "name": "Resolviste",
        "position_occupied": "Backend",
        "client": {
          "type": "company",
          "name": "GODJANGO"
        },
        "description": [
          "Participe en las etapas iniciales del sitio web llamado Resolviste que tenía como intención final proveer de una plataforma intermediaria de remesas entre revendedores y clientes finales, ofreciéndole las herramientas necesarias a ambos actores del negocio.",
          "La api se desarrolló mediante django rest framework, documentada por medio de swagger, con una base de datos en Postgresql, para la seguridad se escogió a JWT Authentication, como plataforma de pago se planeaba usar a Stripe, para la administración se utilizó a jazzmin. La estabilidad de la api se garantizaba por medio de pruebas unitarias.",
          "Documentación: Documenté la API utilizando Swagger, facilitando la comprensión y uso por parte de otros desarrolladores.",
          "Pruebas Unitarias: Realicé pruebas unitarias exhaustivas para validar el correcto funcionamiento del sistema, garantizando su fiabilidad y rendimiento.",
          "Base de Datos: Utilicé PostgreSQL como base de datos principal, asegurando un manejo eficiente y seguro de los datos.",
          "Interfaz Mejorada: Implementé la plantilla Jazzmin para mejorar la apariencia y usabilidad del panel de administración, optimizando la experiencia del usuario."
        ],
        "technologies": [
          "Django",
          "Django Rest Framework",
          "PostgreSQL"
        ],
        "links": [],
        "demo": []
      }
    ],
    "Next": [
      {
        "id": 12,
        "name": "Horizonte Académico",
        "position_occupied": "Full Stack",
        "client": {
          "type": "student"
        },
        "description": [
          "Desarrollé 'Horizonte Académico', una plataforma web completa diseñada para facilitar la gestión académica de estudiantes y su admisión a carreras para la continuidad de su estudio. Este proyecto requirió de una capacidad para crear soluciones web complejas y robustas, abarcando tanto el backend como el frontend.",
          "Implementé una API RESTful potente utilizando Django Rest Framework, conectada a una base de datos PostgreSQL, garantizando una comunicación eficiente y escalable.La documentación exhaustiva de la API con Swagger facilita la integración y el mantenimiento. Además, mejoré la interfaz de administración de Django con Django Jazzmin, proporcionando una experiencia de usuario intuitiva y atractiva.",
          "Para el frontend, desarrollé una interfaz de usuario moderna e intuitiva con Next.js y Tailwind CSS, asegurando una experiencia de usuario excepcional en cualquier dispositivo. Implementé un sistema de roles y permisos granular, controlando el acceso y las funcionalidades para estudiantes, profesores y secretarias.",
          "Las funcionalidades clave incluyen un aula virtual interactiva para la creación y gestión de cursos en línea, carga de recursos, asignación y evaluación de tareas, y comunicación entre profesores y estudiantes. También desarrollé un sistema de gestión de admisiones eficiente y transparente, procesando solicitudes basadas en calificaciones de secundaria, calculando escalafones y asignando carreras universitarias.",
          "Este proyecto demuestra mi capacidad para trabajar con tecnologías de vanguardia y crear aplicaciones web completas que optimizan los procesos académicos y administrativos."
        ],
        "technologies": [
          "Django",
          "Django Rest Framework",
          "PostgreSQL",
          "Node.js",
          "React",
          "Next.js",
          "Tailwind CSS"
        ],
        "links": [
          "https://github.com/critBus/notas_estudiantes_back_drf",
          "https://github.com/BigCatalyst/notas_estudiantes_front_next"
        ],
        "demo": [
          {
            "type": "Web",
            "url": "https://notas-estudiantes-back-drf.onrender.com"
          },
          {
            "type": "Web",
            "url": "https://notas-estudiantes-front-next-5ntw.onrender.com"
          }
        ]
      }
    ],
    "Vuetify": [
      {
        "id": 14,
        "name": "PinkZebra",
        "position_occupied": "Full Stack",
        "client": {
          "type": "company",
          "name": "Nitza",
          "logo": "logos/nitza.svg"
        },
        "description": [
          "Contribuí significativamente al mantenimiento y mejora del sitio web administrativo de PinkZebra, una plataforma crucial para la gestión de datos y resultados de múltiples vendedores.",
          "Mi trabajo se centró en fortalecer la seguridad del sistema mediante la implementación de un control de acceso basado en roles (RBAC) utilizando Middleware, garantizando que solo los usuarios autorizados pudieran acceder a información sensible.",
          "Desarrollé la lógica para visualizar la jerarquía organizacional, permitiendo una comprensión clara de las relaciones entre los miembros de la empresa. Además, me encargué del mantenimiento y la optimización de diversas funcionalidades esenciales para el funcionamiento del sitio web.",
          "Documenté exhaustivamente cada paso del desarrollo utilizando Swagger, facilitando la colaboración y el mantenimiento a largo plazo. Implementé pruebas unitarias para asegurar la estabilidad y fiabilidad de las nuevas secciones de código. Integré las vistas de cada funcionalidad con el frontend desarrollado en Vuetify, asegurando una experiencia de usuario coherente y fluida, y las conecté correctamente con el backend en Django Rest Framework.",
          "Destaco la implementación en Vue del árbol de jerarquía de la organización, que incluía paginación por niveles, optimización de llamadas al backend para minimizar la carga del árbol recursivo y la carga de nodos solo a petición del usuario. Este proyecto demostró mi capacidad para trabajar en un entorno complejo, abordando tanto el frontend como el backend, y aplicando mis habilidades en seguridad, optimización y documentación."
        ],
        "technologies": [
          "Django",
          "Django Rest Framework",
          "Flask",
          "SQLServer",
          "Vue",
          "Vuetify",
          "JavaScript",
          "HTML",
          "CSS"
        ],
        "links": [],
        "demo": []
      }
    ]
  },
  "education": [
    {
      "id": 1,
      "institution": "Universidad Agraria de La Habana 'Fructuoso Rodríguez Pérez'",
      "degree": "Ingenieria en Ciencias de la Computación",
      "field": "Informática y Ciencias de la Computación",
      "startDate": "2016",
      "endDate": "2022"
    }
  ],
  "thesis": [
    {
      "id": 1,
      "title": "IAEstadosDeMaduracion",
      "description": [
        "IAEstadosDeMaduracion es una plataforma web completa en Django, diseñada para proporcionar una plataforma de entrenamiento de sistemas de visión por computadoras basados en redes convolucionales. Esta herramienta permite a los usuarios almacenar y gestionar datasets de imágenes de frutos, que posteriormente pueden ser utilizados para el entrenamiento de una red neuronal convolucional.",
        "La interfaz de esta plataforma web es muy cómoda y ofrece múltiples opciones de configuración para el entrenamiento de la red neuronal. Estas opciones permiten limitar el número máximo de épocas para el entrenamiento, almacenar solo el mejor modelo obtenido y detener el entrenamiento al alcanzar cierto límite de precisión. Durante el proceso de entrenamiento, IA Estados de Maduración proporciona gráficos que muestran la estadística del progreso, como la precisión y la pérdida.",
        "Al finalizar el entrenamiento, se muestra una matriz de confusión que presenta la precisión real del modelo neuronal resultante. Una vez que se han creado varios modelos neuronales para diferentes tipos de frutos, la plataforma permite a los usuarios clasificar automáticamente sus imágenes utilizando el modelo neuronal que mejor precisión haya alcanzado para su tipo de fruto. Esta herramienta es una excelente opción para evaluar la calidad de los sembrados de campos agrícolas, ya que no se requiere sacrificar una parte de la producción en el proceso. Es una herramienta útil para científicos, agricultores y cualquier persona interesada en clasificar imágenes de frutos según sus estados de madurez."
      ],
      "technologies": [
        "Django",
        "PostgreSQL",
        "IA",
        "TensorFlow",
        "Keras",
        "HTML",
        "CSS",
        "JavaScript",
        "Bootstrap"
      ],
      "links": [
        "https://github.com/critBus/IAEstadosDeMaduracion"
      ],
      "demo": []
    }
  ],
  "skills": {
    "Frontend": [
      "React",
      "Next.js",
      "Vue",
      "Vuetify",
      "JavaScript",
      "TypeScript",
      "CSS",
      "HTML",
      "Tailwind CSS",
      "Bootstrap"
    ],
    "Backend": [
      "Django",
      "Django Rest Framework",
      "Flask"
    ],
    "Herramientas": [
      "Git",
      "Github",
      "Docker",
      "Postman"
    ],
    "Bases de Datos": [
      "PostgreSQL",
      "SQLServer",
      "Neo4j"
    ],
    "Programación": [
      "JavaScript",
      "TypeScript",
      "Python",
      "Java",
      "C#",
      "Node.js"
    ],
    "IA": [
      "Deepface",
      "TensorFlow",
      "Keras"
    ]
  }
}